I'll give you an example of RoboSim state machine and the equivalent C++ code below.

```robosim
interface MovementI{
	move(  lv : real , av : real )
	stop()
}

interface ObstacleI{


event obstacle

}


controller SimMovement {

	cycleDef cycle ==1
	requires MovementI
	uses ObstacleI
	sref stm_ref0 = SimSMovement


connection SimMovement on obstacle to stm_ref0 on obstacle

}

stm SimSMovement{

	cycleDef   cycle == 1

	var value : real



	input context {
		uses ObstacleI
	}

	output context {
		requires MovementI
	}

	initial i0

	state SSetup {
		entry value = 1
	}
	state SNotFive {
		exit value = value + 1
	}


	state SFive {
	}
	final f0

	transition t0{
			from i0 to SSetup
		}
	transition  t1 {
		from SSetup
		to SNotFive
	}
	transition t2 {
		from SNotFive
		to SNotFive
		condition value < 5
	}
	transition t3 {
		from SNotFive
		to SFive
		condition value > 5
	}
	transition t4 {
		from SFive
		to f0
		action $ stop ( )
	}
}



module SimCFootBot {

	cycleDef cycle ==1

	robotic platform FootBot {
		provides MovementI
		uses ObstacleI
	}

	cref ctrl_ref0 = SimMovement
	connection FootBot on obstacle to ctrl_ref0 on obstacle
( _async )
}


```

```cpp
#include <iostream>
#include <boost/statechart/state_machine.hpp>
#include <boost/statechart/simple_state.hpp>
#include <boost/statechart/event.hpp>
#include <boost/statechart/transition.hpp>
#include <boost/statechart/custom_reaction.hpp>
#include <boost/statechart/state.hpp>


namespace sc = boost::statechart;

class CounterClass {
    public:
        struct EvCount : sc::event< EvCount > {};
        struct i0;
        struct f0;
        struct SSetup;
        struct SNotFive;
        struct isFive;
        struct Counter : sc::state_machine< Counter, i0 > {};

        struct i0: sc::state< i0, Counter > {
            public:
                typedef sc::custom_reaction< EvCount > reactions;
                i0( my_context ctx ): my_base(ctx) { }
                ~i0(){ }

                sc::result react( const EvCount& ) {
                    if(true) {
                        return transit< SSetup >();
                    }
                }
        };

        struct SSetup: sc::state< SSetup, Counter > {
            public:
                typedef sc::custom_reaction< EvCount > reactions;

                SSetup( my_context ctx ) : my_base(ctx) { std::cout << "Setup state!\n"; value = 1; }
                ~SSetup() { }

                sc::result react( const EvCount& ) {
                    if(true) {
                        return transit< SNotFive >();
                    }
                }
        };

        struct SNotFive: sc::state< SNotFive, Counter > {
            public:
                typedef sc::custom_reaction< EvCount > reactions;

                SNotFive( my_context ctx ) : my_base(ctx) { std::cout << "I'm not five!\n"; }
                ~SNotFive() { value += 1; }

                sc::result react( const EvCount& ) {
                    if(value == 5)
                        return transit< isFive >();
                    else
                        return transit< SNotFive >();
                }
        };

        struct isFive: sc::state< isFive, Counter > {
            public:
                typedef sc::custom_reaction< EvCount > reactions;
                isFive( my_context ctx ) : my_base(ctx) { std::cout << "I'm five :)\n"; }
                ~isFive() {  }

                sc::result react( const EvCount& ) {
                    if(true) {
                        return transit< f0 >();
                    }
                }
        };

        struct f0: sc::state< f0, Counter > {
            typedef sc::custom_reaction<EvCount> reactions;
            f0( my_context ctx ) : my_base(ctx) { std::cout << "Final state!\n"; }
            ~f0() { }
            sc::result react( const EvCount& ) {
                if(true) {
                    return terminate();
                }
            }
        };

        bool execute() {
            Counter machine;
            machine.initiate();
            value = 1;
            while(!machine.terminated()) {
                machine.process_event( EvCount() );
            }

            return true;
        }

    public:
        static int value;
};

int CounterClass::value = 0;

int main() {

    CounterClass counter;
    counter.execute();
    return 0;
}
```