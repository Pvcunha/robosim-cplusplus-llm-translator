this code:
```robosim
interface MovementI{
	move(  lv : real , av : real )
	stop()
}

interface ObstacleI{


event obstacle

}


controller SimMovement {

	cycleDef cycle ==1
	requires MovementI
	uses ObstacleI
	sref stm_ref0 = SimSMovement


connection SimMovement on obstacle to stm_ref0 on obstacle

}

stm SimSMovement{

	cycleDef   cycle == 1

	var value : real



	input context {
		uses ObstacleI
	}

	output context {
		requires MovementI
	}

	initial i0

	state SSetup {
		entry value = 1
	}
	state SNotFive {
		exit value = value + 1
	}


	state SFive {
	}
	final f0

	transition t0{
			from i0 to SSetup
		}
	transition  t1 {
		from SSetup
		to SNotFive
	}
	transition t2 {
		from SNotFive
		to SNotFive
		condition value < 5
	}
	transition t3 {
		from SNotFive
		to SFive
		condition value > 5
	}
	transition t4 {
		from SFive
		to f0
		action $ stop ( )
	}
}



module SimCFootBot {

	cycleDef cycle ==1

	robotic platform FootBot {
		provides MovementI
		uses ObstacleI
	}

	cref ctrl_ref0 = SimMovement
	connection FootBot on obstacle to ctrl_ref0 on obstacle
( _async )
}


```

translates to:

```cpp
#include <iostream>
#include <boost/statechart/state_machine.hpp>
#include <boost/statechart/simple_state.hpp>
#include <boost/statechart/event.hpp>
#include <boost/statechart/transition.hpp>
#include <boost/statechart/custom_reaction.hpp>
#include <boost/statechart/state.hpp>


namespace sc = boost::statechart;

class CounterClass {
    public:
        struct EvCount : sc::event< EvCount > {};
        struct i0;
        struct f0;
        struct SSetup;
        struct SNotFive;
        struct isFive;
        struct Counter : sc::state_machine< Counter, i0 > {};

        struct i0: sc::state< i0, Counter > {
            public:
                typedef sc::custom_reaction< EvCount > reactions;
                i0( my_context ctx ): my_base(ctx) { }
                ~i0(){ }

                sc::result react( const EvCount& ) {
                    if(true) {
                        return transit< SSetup >();
                    }
                }
        };

        struct SSetup: sc::state< SSetup, Counter > {
            public:
                typedef sc::custom_reaction< EvCount > reactions;

                SSetup( my_context ctx ) : my_base(ctx) { std::cout << "Setup state!\n"; value = 1; }
                ~SSetup() { }

                sc::result react( const EvCount& ) {
                    if(true) {
                        return transit< SNotFive >();
                    }
                }
        };

        struct SNotFive: sc::state< SNotFive, Counter > {
            public:
                typedef sc::custom_reaction< EvCount > reactions;

                SNotFive( my_context ctx ) : my_base(ctx) { std::cout << "I'm not five!\n"; }
                ~SNotFive() { value += 1; }

                sc::result react( const EvCount& ) {
                    if(value == 5)
                        return transit< isFive >();
                    else
                        return transit< SNotFive >();
                }
        };

        struct isFive: sc::state< isFive, Counter > {
            public:
                typedef sc::custom_reaction< EvCount > reactions;
                isFive( my_context ctx ) : my_base(ctx) { std::cout << "I'm five :)\n"; }
                ~isFive() {  }

                sc::result react( const EvCount& ) {
                    if(true) {
                        return transit< f0 >();
                    }
                }
        };

        struct f0: sc::state< f0, Counter > {
            typedef sc::custom_reaction<EvCount> reactions;
            f0( my_context ctx ) : my_base(ctx) { std::cout << "Final state!\n"; }
            ~f0() { }
            sc::result react( const EvCount& ) {
                if(true) {
                    return terminate();
                }
            }
        };

        bool execute() {
            Counter machine;
            machine.initiate();
            value = 1;
            while(!machine.terminated()) {
                machine.process_event( EvCount() );
            }

            return true;
        }

    public:
        static int value;
};

int CounterClass::value = 0;

int main() {

    CounterClass counter;
    counter.execute();
    return 0;
}
```
Here is an example of a behavior in robocup simulation 2d
```cpp
// -*-c++-*-

/*
 *Copyright:

 Copyright (C) Hidehisa AKIYAMA

 This code is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 3, or (at your option)
 any later version.

 This code is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this code; see the file COPYING.  If not, write to
 the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

 *EndCopyright:
 */

/////////////////////////////////////////////////////////////////////

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include "bhv_basic_move.h"

#include "strategy.h"

#include "bhv_basic_tackle.h"

#include "basic_actions/basic_actions.h"
#include "basic_actions/body_go_to_point.h"
#include "basic_actions/body_intercept.h"
#include "basic_actions/neck_turn_to_ball_or_scan.h"
#include "basic_actions/neck_turn_to_low_conf_teammate.h"

#include <rcsc/player/player_agent.h>
#include <rcsc/player/debug_client.h>
#include <rcsc/player/intercept_table.h>

#include <rcsc/common/logger.h>
#include <rcsc/common/server_param.h>

#include "neck_offensive_intercept_neck.h"

using namespace rcsc;

/*-------------------------------------------------------------------*/
/*!

 */
bool
Bhv_BasicMove::execute( PlayerAgent * agent )
{
    dlog.addText( Logger::TEAM,
                  __FILE__": Bhv_BasicMove" );

    //-----------------------------------------------
    // tackle
    if ( Bhv_BasicTackle( 0.8, 80.0 ).execute( agent ) )
    {
        return true;
    }

    const WorldModel & wm = agent->world();
    /*--------------------------------------------------------*/
    // chase ball
    const int self_min = wm.interceptTable().selfStep();
    const int mate_min = wm.interceptTable().teammateStep();
    const int opp_min = wm.interceptTable().opponentStep();

    if ( ! wm.kickableTeammate()
         && ( self_min <= 3
              || ( self_min <= mate_min
                   && self_min < opp_min + 3 )
              )
         )
    {
        dlog.addText( Logger::TEAM,
                      __FILE__": intercept" );
        Body_Intercept().execute( agent );
        agent->setNeckAction( new Neck_OffensiveInterceptNeck() );

        return true;
    }

    const Vector2D target_point = Strategy::i().getPosition( wm.self().unum() );
    const double dash_power = Strategy::get_normal_dash_power( wm );

    double dist_thr = wm.ball().distFromSelf() * 0.1;
    if ( dist_thr < 1.0 ) dist_thr = 1.0;

    dlog.addText( Logger::TEAM,
                  __FILE__": Bhv_BasicMove target=(%.1f %.1f) dist_thr=%.2f",
                  target_point.x, target_point.y,
                  dist_thr );

    agent->debugClient().addMessage( "BasicMove%.0f", dash_power );
    agent->debugClient().setTarget( target_point );
    agent->debugClient().addCircle( target_point, dist_thr );

    if ( ! Body_GoToPoint( target_point, dist_thr, dash_power
                           ).execute( agent ) )
    {
        Body_TurnToBall().execute( agent );
    }

    if ( wm.kickableOpponent()
         && wm.ball().distFromSelf() < 18.0 )
    {
        agent->setNeckAction( new Neck_TurnToBall() );
    }
    else
    {
        agent->setNeckAction( new Neck_TurnToBallOrScan( 0 ) );
    }

    return true;
}
```