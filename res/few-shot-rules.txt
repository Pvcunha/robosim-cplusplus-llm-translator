## Context
Let RoboSim be a UML-like notation designed specifically for simulation of autonomous and mobile robots, and including timed primitives.
Let RoboCup 2D be a category of autonomous multi-agent robots of a simulated soccer game.

## Instructions
I will give you a Robosim state machine and your task is generate the equivalent C++ code using the Boost Statechart Library while keeping all state machine structure, transitions, and logic.

DO NOT apply a direct translation. 

Think carefully, give me a C++ code! Reason a little before answering, take your time, this is important!!!

## Rules
- MUST CHANGE server::Vector2D to rcsc::Vector2D
- MUST CHANGE server::PlayerAgent to rcsc::PlayerAgent 
- MUST use rcsc::PlayerAgent as pointer
- MUST add the conditional bodies in the transitions
- MUST include function parameters in functions
- MUST use just this imports:
    #include "rcsc/geom/vector_2d.h"
    #include <boost/statechart/custom_reaction.hpp>
    #include <boost/statechart/termination.hpp>

    #include <boost/statechart/event.hpp>
    #include <boost/statechart/result.hpp>
    #include <boost/statechart/simple_state.hpp>
    #include <boost/statechart/state.hpp>
    #include <boost/statechart/state_machine.hpp>
    #include <boost/statechart/transition.hpp>
    #include <rcsc/player/soccer_action.h>
    #include <rcsc/player/world_model.h>
    #include <rcsc/player/player_agent.h>

## Pseudocodes for the translation of a RoboSim metamodel to C++ code
### Function 2. Translation of a State Machine Body.
translate_state_machine_body(smb : StateMachineBody) : C + + =
    class smb.name RoboSim : rcsc :: SoccerBehavior{
    variable declarations(smb)
    struct smb.name : sc :: state machine < smb.name, getInitialJunction(smb) > {};
    translate nodes(smb)
};

### Function 3. Translation of Nodes.
translate_nodes(smb : StateMachineBody) : C + + =
    for (n : smb.nodes) {
    if (n ∈ Initial ∨ n ∈ Junction ∨ n ∈ Final)
    then translate junction(smb, n)
    if (n ∈ State)
    then translate simple_state(smb, n)
}

### Function 4. Translation of a Simple State.
translate_simple_state(smb : StateMachineBody, st : State) : C + + =
    struct st.name : sc :: state < st.name, smb.name > {
        using reactions = sc :: custom reaction < Transition >;
        if (st.actions̸ = null) {
            for(action : st.actions)
                translate_action(st, action) 
        }

        sc :: result react(const Transition &){
            translate_transitions(smb, st)
        }
    };

### Function 5. Translation of an Action
translate_action(st : State, ac : Action) : C + + =
    if (ac is EntryAction){
    translate entry_action(st, ac.action)
    }
    if (ac is ExitAction){
    translate exit_action(st, ac.action)
    }

### Function 6. Translation of an Entry action
translate entry_action(st : State, stmt : Statement) : C + + =
    st.name (my context ctx ) : my_base(ctx ){
    translate_statement(stmt)}
    

### Function 7. Translation of an Exit action
translate_exit_action(st : State, stmt : Statement) : C + + =
~st.name () {
    translate_statement(stmt)}

### Function 8. Translation of transitions.
translate transitions(stm : StateMachineBody, st : State) : C + + =
sc :: result react(const Transition &){
let stateTransitions = transitions from state(stm, st)
    firstTransition = stateTransitions.head()
    c = (firstTransition.condition̸ = null ? translate expression(firstTransition.condition) : true)
    a = (firstTransition.action̸ = null ? translate statement(firstTransition.action) : )

if (c) {
a
return transit < firstTransition.target.name > ();
}

for (t : stateTransitions.tail()) {
    c = (t.condition = null ? translate expression(t.condition) : true)
    a = (t.action = null ? translate statement(t.action) : )
    

    else if (c) {
    a
    return transit < t.target.name > ();
    }
}
};

## Example RoboSim State Machine
interface MovementI{
	move(  lv : real , av : real )
	stop()
}

interface ObstacleI{


event obstacle

}


controller SimMovement {

	cycleDef cycle ==1
	requires MovementI
	uses ObstacleI
	sref stm_ref0 = SimSMovement


connection SimMovement on obstacle to stm_ref0 on obstacle

}

stm SimSMovement{

	cycleDef   cycle == 1

	var value : real



	input context {
		uses ObstacleI
	}

	output context {
		requires MovementI
	}

	initial i0

	state SSetup {
		entry value = 1
	}
	state SNotFive {
		exit value = value + 1
	}


	state SFive {
	}
	final f0

	transition t0{
			from i0 to SSetup
		}
	transition  t1 {
		from SSetup
		to SNotFive
	}
	transition t2 {
		from SNotFive
		to SNotFive
		condition value < 5
	}
	transition t3 {
		from SNotFive
		to SFive
		condition value > 5
	}
	transition t4 {
		from SFive
		to f0
		action $ stop ( )
	}
}

module SimCFootBot {

	cycleDef cycle ==1

	robotic platform FootBot {
		provides MovementI
		uses ObstacleI
	}

	cref ctrl_ref0 = SimMovement
	connection FootBot on obstacle to ctrl_ref0 on obstacle
( _async )
}

## Example of C++ equivalent code
#include <iostream>
#include <boost/statechart/state_machine.hpp>
#include <boost/statechart/simple_state.hpp>
#include <boost/statechart/event.hpp>
#include <boost/statechart/transition.hpp>
#include <boost/statechart/custom_reaction.hpp>
#include <boost/statechart/state.hpp>

namespace sc = boost::statechart;

class CounterClass {
    public:
        struct EvCount : sc::event< EvCount > {};
        struct i0;
        struct f0;
        struct SSetup;
        struct SNotFive;
        struct isFive;
        struct Counter : sc::state_machine< Counter, i0 > {};

        struct i0: sc::state< i0, Counter > {
            public:
                typedef sc::custom_reaction< EvCount > reactions;
                i0( my_context ctx ): my_base(ctx) { }
                ~i0(){ }

                sc::result react( const EvCount& ) {
                    if(true) {
                        return transit< SSetup >();
                    }
                }
        };

        struct SSetup: sc::state< SSetup, Counter > {
            public:
                typedef sc::custom_reaction< EvCount > reactions;

                SSetup( my_context ctx ) : my_base(ctx) { std::cout << "Setup state!\n"; value = 1; }
                ~SSetup() { }

                sc::result react( const EvCount& ) {
                    if(true) {
                        return transit< SNotFive >();
                    }
                }
        };

        struct SNotFive: sc::state< SNotFive, Counter > {
            public:
                typedef sc::custom_reaction< EvCount > reactions;

                SNotFive( my_context ctx ) : my_base(ctx) { std::cout << "I'm not five!\n"; }
                ~SNotFive() { value += 1; }

                sc::result react( const EvCount& ) {
                    if(value == 5)
                        return transit< isFive >();
                    else
                        return transit< SNotFive >();
                }
        };

        struct isFive: sc::state< isFive, Counter > {
            public:
                typedef sc::custom_reaction< EvCount > reactions;
                isFive( my_context ctx ) : my_base(ctx) { std::cout << "I'm five :)\n"; }
                ~isFive() {  }

                sc::result react( const EvCount& ) {
                    if(true) {
                        return transit< f0 >();
                    }
                }
        };

        struct f0: sc::state< f0, Counter > {
            typedef sc::custom_reaction<EvCount> reactions;
            f0( my_context ctx ) : my_base(ctx) { std::cout << "Final state!\n"; }
            ~f0() { }
            sc::result react( const EvCount& ) {
                if(true) {
                    return terminate();
                }
            }
        };

        bool execute() {
            Counter machine;
            machine.initiate();
            value = 1;
            while(!machine.terminated()) {
                machine.process_event( EvCount() );
            }

            return true;
        }

    public:
        static int value;
};

int CounterClass::value = 0;

int main() {
    CounterClass counter;
    counter.execute();
    return 0;
}

## Requested State Machine
Here follows the RoboSim state machine, give me the equivalent C++ code, using Boost.Statechart C++ library and librcsc C++ library from RoboCup 2D.